{"name":"Faker","tagline":"Faker is a Python package that generates fake data for you.","body":"![L'allegoria della menzogna. Salvador Rosa](images/salvador-rosa-allegoria-della-menzogna.jpg)\r\n\r\n    _|_|_|_|          _|\r\n    _|        _|_|_|  _|  _|      _|_|    _|  _|_|\r\n    _|_|_|  _|    _|  _|_|      _|_|_|_|  _|_|\r\n    _|      _|    _|  _|  _|    _|        _|\r\n    _|        _|_|_|  _|    _|    _|_|_|  _|\r\n\r\n# Faker #\r\n\r\nFaker is a Python package that generates fake data for you. Whether you need to bootstrap your database,\r\ncreate good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service,\r\nFaker is for you.\r\n\r\nFaker is heavily inspired by PHP's [Faker][php-faker], Perl's [Data::Faker][perl-faker], and by ruby's [Faker][ruby-faker].\r\n\r\n## Basic Usage\r\n\r\nInstall with pip:\r\n\r\n    pip install fake-factory\r\n\r\nUse `faker.Factory.create()` to create and initialize a faker generator, which can generate data by accessing properties named after the type of data you want.\r\n\r\n```python\r\n\r\n    from faker import Factory\r\n\r\n    faker = Factory.create()\r\n\r\n    faker.name()\r\n    # 'Lucy Cechtelar'\r\n\r\n    faker.address()\r\n    # \"426 Jordy Lodge\r\n    #  Cartwrightshire, SC 88120-6700\"\r\n\r\n    faker.text()\r\n    # Sint velit eveniet. Rerum atque repellat voluptatem quia rerum. Numquam excepturi\r\n    # beatae sint laudantium consequatur. Magni occaecati itaque sint et sit tempore. Nesciunt\r\n    # amet quidem. Iusto deleniti cum autem ad quia aperiam.\r\n    # A consectetur quos aliquam. In iste aliquid et aut similique suscipit. Consequatur qui\r\n    # quaerat iste minus hic expedita. Consequuntur error magni et laboriosam. Aut aspernatur\r\n    # voluptatem sit aliquam. Dolores voluptatum est.\r\n    # Aut molestias et maxime. Fugit autem facilis quos vero. Eius quibusdam possimus est.\r\n    # Ea quaerat et quisquam. Deleniti sunt quam. Adipisci consequatur id in occaecati.\r\n    # Et sint et. Ut ducimus quod nemo ab voluptatum.\r\n```\r\n\r\nEach call to method `faker.name()` yealds a different (random) result. This is because faker uses `__getattr__` magic, and forwards `faker.Genarator.method_name()' calls to `faker.Generator.format(method_name)`.\r\n\r\n```python\r\n\r\nfor i in range(0,10):\r\n  print faker.name()\r\n\r\n\t# Adaline Reichel\r\n\t# Dr. Santa Prosacco DVM\r\n\t# Noemy Vandervort V\r\n\t# Lexi O'Conner\r\n\t# Gracie Weber\r\n\t# Roscoe Johns\r\n\t# Emmett Lebsack\r\n\t# Keegan Thiel\r\n\t# Wellington Koelpin II\r\n\t# Ms. Karley Kiehn V\r\n```\r\n\r\n\r\n## Formatters\r\n\r\nEach of the generator properties (like `name`, `address`, and `lorem`) are called \"formatters\".\r\nA faker generator has many of them, packaged in \"providers\". Here is a list of the bundled formatters in the default locale.\r\n\r\n\r\n### faker.providers.File:\r\n\r\n    fake.mimeType()                    # video/webm\r\n\r\n### faker.providers.UserAgent:\r\n\r\n    fake.chrome()                      # Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_8_4) AppleWebKit/5341 (KHTML, like Gecko) Chrome/13.0.803.0 Safari/5341\r\n    fake.firefox()                     # Mozilla/5.0 (Windows 95; sl-SI; rv:1.9.1.20) Gecko/2012-01-06 22:35:05 Firefox/3.8\r\n    fake.internetExplorer()            # Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.1)\r\n    fake.linuxPlatformToken()          # X11; Linux x86_64\r\n    fake.linuxProcessor()              # x86_64\r\n    fake.macPlatformToken()            # Macintosh; U; PPC Mac OS X 10_7_6\r\n    fake.macProcessor()                # U; PPC\r\n    fake.opera()                       # Opera/9.41 (Windows CE; it-IT) Presto/2.9.168 Version/12.00\r\n    fake.safari()                      # Mozilla/5.0 (Windows; U; Windows NT 5.1) AppleWebKit/534.34.4 (KHTML, like Gecko) Version/5.0 Safari/534.34.4\r\n    fake.userAgent()                   # Mozilla/5.0 (iPod; U; CPU iPhone OS 3_2 like Mac OS X; en-US) AppleWebKit/531.15.3 (KHTML, like Gecko) Version/4.0.5 Mobile/8B119 Safari/6531.15.3\r\n    fake.windowsPlatformToken()        # Windows 98; Win 9x 4.90\r\n\r\n### faker.providers.PhoneNumber:\r\n\r\n    fake.phoneNumber()                 # (593)652-1880\r\n\r\n### faker.providers.Miscelleneous:\r\n\r\n    fake.boolean()                     # True\r\n    fake.countryCode()                 # BB\r\n    fake.languageCode()                # fr\r\n    fake.locale()                      # pt_GN\r\n    fake.md5()                         # ab9d3552b5c6e68714c04c35725ba73c\r\n    fake.nullBoolean()                 # True\r\n    fake.sha1()                        # 3fc2ede28f2596050f9a94c15c59b800175409d0\r\n    fake.sha256()                      # f06561a971d6b1306ecef60be336556d6de2540c2d0d2158f4d0ea3f212cd740\r\n\r\n### faker.providers.Internet:\r\n\r\n    fake.companyEmail()                # ggreenfelder@ortizmedhurst.com\r\n    fake.domainName()                  # mayer.com\r\n    fake.domainWord()                  # gusikowski\r\n    fake.email()                       # gbrakus@johns.net\r\n    fake.freeEmail()                   # abbey60@yahoo.com\r\n    fake.freeEmailDomain()             # hotmail.com\r\n    fake.ipv4()                        # 81.132.249.71\r\n    fake.ipv6()                        # 4c55:8c8b:54b5:746d:44ed:c7ab:486a:a50e\r\n    fake.safeEmail()                   # amalia49@example.com\r\n    fake.slug()                        # TypeError\r\n    fake.tld()                         # net\r\n    fake.uri()                         # http://www.parker.com/\r\n    fake.uriExtension()                # .asp\r\n    fake.uriPage()                     # terms\r\n    fake.uriPath()                     # explore/list/app\r\n    fake.url()                         # http://dubuque.info/\r\n    fake.userName()                    # goodwin.edwin\r\n\r\n### faker.providers.Company:\r\n\r\n    fake.bs()                          # maximize end-to-end infrastructures\r\n    fake.catchPhrase()                 # Multi-tiered analyzing instructionset\r\n    fake.company()                     # Stanton-Luettgen\r\n    fake.companySuffix()               # Group\r\n\r\n### faker.providers.DateTime:\r\n\r\n    fake.amPm()                        # AM\r\n    fake.century()                     # IX\r\n    fake.date()                        # 1985-02-17\r\n    fake.dateTime()                    # 1995-06-08 14:46:50\r\n    fake.dateTimeAD()                  # 1927-12-17 23:08:46\r\n    fake.dateTimeBetween()             # 1999-08-22 22:49:52\r\n    fake.dateTimeThisCentury()         # 1999-07-24 23:35:49\r\n    fake.dateTimeThisDecade()          # 2008-01-27 01:08:37\r\n    fake.dateTimeThisMonth()           # 2012-11-12 14:13:04\r\n    fake.dateTimeThisYear()            # 2012-05-19 00:40:00\r\n    fake.dayOfMonth()                  # 23\r\n    fake.dayOfWeek()                   # Friday\r\n    fake.iso8601()                     # 2009-04-09T21:30:02\r\n    fake.month()                       # 03\r\n    fake.monthName()                   # April\r\n    fake.time()                        # 06:16:50\r\n    fake.timezone()                    # America/Noronha\r\n    fake.unixTime()                    # 275630166\r\n    fake.year()                        # 2002\r\n\r\n### faker.providers.Person:\r\n\r\n    fake.firstName()                   # Elton\r\n    fake.lastName()                    # Schowalter\r\n    fake.name()                        # Susan Pagac III\r\n    fake.prefix()                      # Ms.\r\n    fake.suffix()                      # V\r\n\r\n### faker.providers.Address:\r\n\r\n    fake.address()                     # 044 Watsica Brooks\r\n                                         West Cedrickfort, SC 35023-5157\r\n    fake.buildingNumber()              # 319\r\n    fake.city()                        # Kovacekfort\r\n    fake.cityPrefix()                  # New\r\n    fake.citySuffix()                  # ville\r\n    fake.country()                     # Monaco\r\n    fake.geo_coordinate()              # 148.031951\r\n    fake.latitude()                    # 154.248666\r\n    fake.longitude()                   # 109.920335\r\n    fake.postcode()                    # 82402-3206\r\n    fake.secondaryAddress()            # Apt. 230\r\n    fake.state()                       # Nevada\r\n    fake.stateAbbr()                   # NC\r\n    fake.streetAddress()               # 793 Haskell Stravenue\r\n    fake.streetName()                  # Arvilla Valley\r\n    fake.streetSuffix()                # Crescent\r\n\r\n### faker.providers.Lorem:\r\n\r\n    fake.paragraph()                   # Itaque quia harum est autem inventore quisquam eaque. Facere mollitia repudiandae\r\n                                         qui et voluptas. Consequatur sunt ullam blanditiis aliquam veniam illum voluptatem.\r\n    fake.paragraphs()                  # ['Alias porro soluta eum voluptate. Iste consequatur qui non nam.',\r\n                                            'Id eum sint eius earum veniam fugiat ipsum et. Et et occaecati at labore\r\n                                            amet et. Rem velit inventore consequatur facilis. Eum consequatur consequatur\r\n                                            quis nobis.', 'Harum autem autem totam ex rerum adipisci magnam adipisci.\r\n                                            Qui modi eos eum vel quisquam. Tempora quas eos dolorum sint voluptatem\r\n                                            tenetur cum. Recusandae ducimus deleniti magnam ullam adipisci ipsa.']\r\n    fake.sentence()                    # Eum magni soluta unde minus nobis.\r\n    fake.sentences()                   # ['Ipsam eius aut veritatis iusto.',\r\n                                            'Occaecati libero a aut debitis sunt quas deserunt aut.',\r\n                                            'Culpa dolor voluptatum laborum at et enim.']\r\n    fake.text()                        # Dicta quo eius possimus quae eveniet cum nihil. Saepe sint non nostrum.\r\n                                         Sequi est sit voluptate et eos eum et. Pariatur non sunt distinctio magnam.\r\n    fake.word()                        # voluptas\r\n    fake.words()                       # ['optio', 'et', 'voluptatem']\r\n\r\n\r\n\r\n## Localization\r\n\r\n`faker.Factory` can take a locale as an argument, to return localized data.\r\nIf no localized provider is found, the factory fallbacks to the default locale (en_EN).\r\n\r\n    from faker import Factory\r\n    fake = Factory.create('it_IT')\r\n    for i in range(0,10):\r\n        print fake.name()\r\n\r\n    # Elda Palumbo\r\n    # Pacifico Giordano\r\n    # Sig. Avide Guerra\r\n    # Yago Amato\r\n    # Eustachio Messina\r\n    # Dott. Violante Lombardo\r\n    # Sig. Alighieri Monti\r\n    # Costanzo Costa\r\n    # Nazzareno Barbieri\r\n    # Max Coppola\r\n\r\nYou can check available Faker locales in the source code, under the providers package.\r\nThe localization of Faker is an ongoing process, for which we need your help.\r\nDon't hesitate to create localized providers to your own locale and submit a PR!\r\n\r\n\r\n# Using from shell\r\n\r\nIn a python environment with faker installed you can use it with:\r\n\r\n    python -m faker [option] [*args]\r\n\r\n[option]:\r\n\r\n*  formatter name as `text`, `address`: display result of fake\r\n*  Provider name as `Lorem`: display all Provider's fakes\r\n\r\n[*args]: pass value to formatter (actually only strings)\r\n\r\n    $ python -m faker address\r\n    968 Bahringer Garden Apt. 722\r\n    Kristinaland, NJ 09890\r\n\r\n\r\n# Seeding the Generator\r\n\r\nYou may want to get always the same generated data - for instance when using Faker for unit testing purposes.\r\nThe generator offers a `seed()` method, which seeds the random number generator.\r\nCalling the same script twice with the same seed produces the same results.\r\n\r\n    from faker import Faker\r\n    fake = Faker()\r\n    fake.seed(4321)\r\n\r\n    print fake.name()   # Margaret Boehm\r\n\r\n\r\n\r\n# Tests\r\n\r\nRun tests:\r\n\r\n    $ python setup.py test\r\n\r\nor\r\n\r\n    $ python -m unittest -v faker.tests\r\n\r\nWrite documentation for providers:\r\n\r\n    $ python -m faker > docs.txt\r\n\r\n\r\n\r\n## License\r\n\r\nFaker is released under the MIT Licence. See the bundled LICENSE file for details.\r\n\r\n\r\nCredits\r\n-------\r\n- [FZaninotto][fzaninotto] / [Faker][php-faker]\r\n- [Distribute][distribute]\r\n- [Buildout][buildout]\r\n- [modern-package-template][modern-package-template]\r\n\r\n[fzaninotto]: https://github.com/fzaninotto  \"F.Zaninotto\"\r\n[php-faker]: https://github.com/fzaninotto/Faker \"Php faker\"\r\n[perl-faker]: http://search.cpan.org/~jasonk/Data-Faker-0.07/ \"Perl faker\"\r\n[ruby-faker]: http://faker.rubyforge.org/ \"Ruby faker\"\r\n[buildout]: http://www.buildout.org/\r\n[distribute]:  http://pypi.python.org/pypi/distribute\r\n[modern-package-template]: http://pypi.python.org/pypi/modern-package-template","google":"UA-43608299-1","note":"Don't delete this file! It's used internally to help with page regeneration."}